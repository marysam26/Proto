@model WriteItUp2.Areas.Reviewer.Models.ReviewInput

@*This view is the second from the top on the right in the mockups.
THe Left side that is visible will be a form that is completed,
see AddStudent in the Teacher view for an example*@

@{
    ViewBag.Title = "Review Story";
}

<h2>Review Story</h2>
<body style="
        background-image: url(/Images/grey.jpg);
        background-repeat: no-repeat;
        background-size: cover">

</body>

<script type="text/javascript">

    function Show() {

            var r = confirm("Are you sure you want to submit this review?");

            if (r==true)

            {

                return true;

            }

            else

            {

                return false;

            }


    }

</script>

@* The drop down for the scores still needs to be implemented*@
<div class="content-wrapper">
    @using (Html.BeginForm("ReviewStoryView", "ReviewerHome", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div class="form-horizontal">
            @Html.ValidationSummary(true)
            <center> <h2>@Model.AssignmentName</h2></center>
            <center><h2>@Model.AssignmentDescription</h2></center>
            <center><h3>@Model.StoryTitle</h3></center>
            <center><h4>@Model.Story</h4></center>
            <p></p>
            <br><br><br>
            <center><font size="2" color="red">For scoring purposes only: Were the following questions answered in the student's story? 0=No, 1=Yes</font></center>
            <div class="form-group">
                @Html.LabelFor(model => model.ScoreWhoStory, "Who is in the story?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreWhoStory, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreWhoStory)
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.ScoreWhereStory, "Where does the story take place?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreWhereStory, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreWhereStory)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreWhenStory, "When does the story take place?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreWhenStory, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreWhenStory)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreWhatStory, "What happens in the story?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreWhatStory, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreWhatStory)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreWhatNext, "What happens next?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreWhatNext, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreWhatNext)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreHowStory, "How does the story end?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreHowStory, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreHowStory)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreCharacterFeel, "How does the main/other character(s) feel?", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreCharacterFeel, Model.KeyList, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreCharacterFeel)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ScoreOverall, "Overall Story score", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.DropDownListFor(model => model.ScoreOverall, Model.KeyList2, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ScoreOverall)
                </div>
            </div>

            <div>
            @Html.TextBoxFor(model => model.SubmitId, new { @Value = Model.SubmitId, @type = "hidden" })</div>
            <div class="form-group">
                @Html.LabelFor(model => model.Comments, "Comments", new { @class = "control-label col-md-4" })
                <div class="col-md-4">
                    @Html.TextAreaFor(model => model.Comments, new { style = "width: 360px; height: 100px;" })
                    @Html.ValidationMessageFor(model => model.Comments)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-4 col-md-8">
                    <input type="submit" value="Submit" class="btn btn-primary" onclick="javascript: return Show();" />
                </div>
            </div>
        </div>
    }
</div>
